// Test definitions. Do NOT edit this file!

#include <tuple>

#define CATCH_CONFIG_MAIN // defines main() automatically
#include "catch_amalgamated.hpp"

#include "../ContCilindrico.hpp" // implementations
#include "../ContPrismaRect.hpp"

// =====================
// tests for exercise 1
// ---------------------

TEST_CASE("Ex1", "[Probando constructores default Cilindrico]")
{
    ContCilindrico cilindro;
    SECTION("Constructor default cilindrico")  
    {
        REQUIRE(cilindro.getAlto() == 1);
        REQUIRE(cilindro.getRadio() == 1);

    }
}
TEST_CASE("Ex2", "[Probando constructores default Prisma]")
{
    ContPrismaRect prisma;
    SECTION("Constructor Default prisma")
    {
        REQUIRE(prisma.getAlto() == 1);
        REQUIRE(prisma.getAncho() == 1);
        REQUIRE(prisma.getLargo() == 1);

    }
}

TEST_CASE("Ex3", "[Probando constructores con parametros cilindrico]")
{
    ContCilindrico cilindro(4,3);
    SECTION("Constructor parámetros cilindrico")  
    {
        REQUIRE(cilindro.getAlto() == 4);
        REQUIRE(cilindro.getRadio() == 3);

    }
}
TEST_CASE("Ex4", "[Probando constructores con parametros prisma]")
{
    ContPrismaRect prisma(5,3,4);
    SECTION("Constructor parametros prisma") 
    {
        REQUIRE(prisma.getAlto() == 5);
        REQUIRE(prisma.getAncho() == 3);
        REQUIRE(prisma.getLargo() == 4);
    }
}

TEST_CASE("Ex5", "[Probando polimorfismo en tiempo de ejecución]")
{
    Contenedor* c1 = new ContCilindrico(4, 2);
    Contenedor* c2 = new ContPrismaRect(5, 3, 4);
    SECTION("Polimorfismo de calcula volumen")  
    {
        REQUIRE(c1->calculaVolumen() == 50.2656);
        REQUIRE(c2->calculaVolumen() ==  60);

    }
}

TEST_CASE("Ex6", "[Probando operador ==]")
{
    Contenedor* c1 = new ContCilindrico(10, 5);
    Contenedor* c2 = new ContPrismaRect(5, 3, 4);
    ContCilindrico cilindro1(10, 5);
    ContPrismaRect prisma1(5, 3, 4);
    SECTION("Operador == para clindro")  
    {
        REQUIRE(*c1 == cilindro1);
        REQUIRE(!(*c2 == cilindro1));
        REQUIRE(*c2 == prisma1);
        REQUIRE(!(*c1 == prisma1));
        REQUIRE(!(*c1 == *c2));
    }
}