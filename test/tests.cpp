// Test definitions. Do NOT edit this file!

#include <tuple>
#include <iostream>
#define CATCH_CONFIG_MAIN // defines main() automatically
#include "catch_amalgamated.hpp"

#include "../Pixel.hpp" // implementations
#include "../Punto3D.hpp"

// =====================
// tests for exercise 1
// ---------------------

TEST_CASE("Ex1", "[Probando constructores default Punto3D]")
{
    Punto3D p3d;
    SECTION("Constructor default cilindrico")  
    {
        REQUIRE(p3d.getX() == 0);
        REQUIRE(p3d.getY() == 1);
        REQUIRE(p3d.getZ() == 1);
    }
}
TEST_CASE("Ex2", "[Probando constructores default Prisma]")
{
    Pixel px;
    SECTION("Constructor default pixel")  
    {
        REQUIRE(px.getX() == 0);
        REQUIRE(px.getY() == 1);
        REQUIRE(px.getColor() == "rojo");
    }
}

TEST_CASE("Ex3", "[Probando constructores con parametros 3d]")
{
    Punto3D p3d{2,2,3};
    SECTION("Constructor default 3d")  
    {
        REQUIRE(p3d.getX() == 2);
        REQUIRE(p3d.getY() == 2);
        REQUIRE(p3d.getZ() == 3);
    }
}
TEST_CASE("Ex4", "[Probando constructores con parametros pixel]")
{
    Pixel px{2,2,"azul"};
    SECTION("Constructor default pixel")  
    {
        REQUIRE(px.getX() == 2);
        REQUIRE(px.getY() == 2);
        REQUIRE(px.getColor() == "azul");
    }
}

TEST_CASE("Ex5", "[Probando polimorfismo en tiempo de ejecuci√≥n]")
{
    Punto* c1 = new Pixel{4, 2, "verde"};
    Punto* c2 = new Punto3D{5, 3, 4};
    SECTION("Polimorfismo con mostrar()")  
    {
        std::cout << c1 << std::endl;
        std::cout << c2 << std::endl;
        REQUIRE(true);

    }
}

TEST_CASE("Ex6", "[Probando operador ==]")
{
    Punto* c1 = new Pixel{10, 5, "rojo"};
    Punto* c2 = new Punto3D(5, 3, 4);
    Punto c3{5, 3};
    SECTION("Operador == para clindro")  
    {
        REQUIRE(!(*c1 == *c2));
        REQUIRE(*c2 == c3);
        REQUIRE(!(*c1 == c3));
    }
}